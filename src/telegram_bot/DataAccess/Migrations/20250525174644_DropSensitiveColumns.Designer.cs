// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramForwardly.DataAccess.Context;

#nullable disable

namespace TelegramForwardly.DataAccess.Migrations
{
    [DbContext(typeof(ForwardlyContext))]
    [Migration("20250525174644_DropSensitiveColumns")]
    partial class DropSensitiveColumns
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Chat", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("TelegramChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("tg_chat_id");

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.HasKey("Id");

                    b.HasIndex("TelegramUserId");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Client", b =>
                {
                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.Property<bool?>("AllChatsFilteringEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("all_chats_filtering_enabled");

                    b.Property<string>("ApiHash")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("api_hash");

                    b.Property<string>("ApiId")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("api_id");

                    b.Property<long?>("CurrentStateId")
                        .HasColumnType("bigint")
                        .HasColumnName("current_state_id");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("first_name");

                    b.Property<long?>("ForumSupergroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("forum_supergroup_id");

                    b.Property<bool?>("ForwardlyEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("forwardly_enabled");

                    b.Property<bool?>("IsAuthenticated")
                        .HasColumnType("bit")
                        .HasColumnName("is_authenticated");

                    b.Property<bool?>("LoggingTopicEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("logging_topic_enabled");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("RegistrationDataTime")
                        .HasColumnType("datetime")
                        .HasColumnName("registration_datetime");

                    b.Property<string>("SessionString")
                        .HasColumnType("varchar(600)")
                        .HasColumnName("session_sting");

                    b.Property<string>("TopicGrouping")
                        .HasColumnType("varchar(32)")
                        .HasColumnName("topic_grouping");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(32)")
                        .HasColumnName("username");

                    b.HasKey("TelegramUserId");

                    b.HasIndex("CurrentStateId");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.ClientCurrentState", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(124)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("client_current_states");

                    b.HasData(
                        new
                        {
                            Id = 1L,
                            Value = "Idle"
                        },
                        new
                        {
                            Id = 2L,
                            Value = "AwaitingPhoneNumber"
                        },
                        new
                        {
                            Id = 3L,
                            Value = "AwaitingApiId"
                        },
                        new
                        {
                            Id = 4L,
                            Value = "AwaitingApiHash"
                        },
                        new
                        {
                            Id = 5L,
                            Value = "AwaitingVerificationCode"
                        },
                        new
                        {
                            Id = 6L,
                            Value = "AwaitingPassword"
                        },
                        new
                        {
                            Id = 7L,
                            Value = "AwaitingEnableAllChats"
                        },
                        new
                        {
                            Id = 8L,
                            Value = "AwaitingChats"
                        },
                        new
                        {
                            Id = 9L,
                            Value = "AwaitingKeywords"
                        },
                        new
                        {
                            Id = 10L,
                            Value = "AwaitingForumGroup"
                        },
                        new
                        {
                            Id = 11L,
                            Value = "AwaitingGroupingType"
                        },
                        new
                        {
                            Id = 12L,
                            Value = "AwaitingEnableLoggingTopic"
                        });
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Keyword", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("TelegramUserId")
                        .HasColumnType("bigint")
                        .HasColumnName("telegram_user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("TelegramUserId");

                    b.ToTable("keywords");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("TelegramForwardly.DataAccess.Entities.Client", "Client")
                        .WithMany("Chats")
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Client", b =>
                {
                    b.HasOne("TelegramForwardly.DataAccess.Entities.ClientCurrentState", "CurrentState")
                        .WithMany("Clients")
                        .HasForeignKey("CurrentStateId");

                    b.Navigation("CurrentState");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Keyword", b =>
                {
                    b.HasOne("TelegramForwardly.DataAccess.Entities.Client", "Client")
                        .WithMany("Keywords")
                        .HasForeignKey("TelegramUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Client", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Keywords");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.ClientCurrentState", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
