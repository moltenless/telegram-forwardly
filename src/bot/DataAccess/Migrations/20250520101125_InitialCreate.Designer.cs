// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramForwardly.DataAccess.Context;

#nullable disable

namespace TelegramForwardly.DataAccess.Migrations
{
    [DbContext(typeof(ForwardlyContext))]
    [Migration("20250520101125_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Chat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("db_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint")
                        .HasColumnName("tg_id");

                    b.Property<int>("TypeId")
                        .HasColumnType("int")
                        .HasColumnName("type_id");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("chats");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.ChatType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("chat_types");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Client", b =>
                {
                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<bool?>("AllChatsFilteringEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("all_chats_filtering_enabled");

                    b.Property<string>("ApiHash")
                        .HasColumnType("varchar(64)")
                        .HasColumnName("api_hash");

                    b.Property<string>("ApiId")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("api_id");

                    b.Property<int?>("CurrentStateId")
                        .HasColumnType("int")
                        .HasColumnName("current_state_id");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("first_name");

                    b.Property<long?>("ForumSupergroupId")
                        .HasColumnType("bigint")
                        .HasColumnName("forum_supergroup_id");

                    b.Property<bool?>("ForwardlyEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("forwardly_enabled");

                    b.Property<bool?>("LoggingTopicEnabled")
                        .HasColumnType("bit")
                        .HasColumnName("logging_topic_enabled");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("password");

                    b.Property<string>("Phone")
                        .HasColumnType("varchar(20)")
                        .HasColumnName("phone");

                    b.Property<DateTime?>("RegistrationDataTime")
                        .HasColumnType("datetime")
                        .HasColumnName("registration_datetime");

                    b.Property<string>("SessionString")
                        .HasColumnType("varchar(600)")
                        .HasColumnName("session_sting");

                    b.Property<int?>("TopicGroupingTypeId")
                        .HasColumnType("int")
                        .HasColumnName("topic_grouping_type_id");

                    b.Property<string>("UserName")
                        .HasColumnType("varchar(32)")
                        .HasColumnName("username");

                    b.Property<string>("VerificationCode")
                        .HasColumnType("varchar(16)")
                        .HasColumnName("verification_code");

                    b.HasKey("UserId");

                    b.HasIndex("CurrentStateId");

                    b.HasIndex("TopicGroupingTypeId");

                    b.ToTable("clients");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.ClientCurrentState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(124)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("client_current_states");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Keyword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("keywords");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.TopicGroupingType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("varchar(64)")
                        .HasColumnName("value");

                    b.HasKey("Id");

                    b.ToTable("topic_grouping_types");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Chat", b =>
                {
                    b.HasOne("TelegramForwardly.DataAccess.Entities.ChatType", "Type")
                        .WithMany("Chats")
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TelegramForwardly.DataAccess.Entities.Client", "Client")
                        .WithMany("Chats")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Client", b =>
                {
                    b.HasOne("TelegramForwardly.DataAccess.Entities.ClientCurrentState", "CurrentState")
                        .WithMany("Clients")
                        .HasForeignKey("CurrentStateId");

                    b.HasOne("TelegramForwardly.DataAccess.Entities.TopicGroupingType", "TopicGroupingType")
                        .WithMany("Clients")
                        .HasForeignKey("TopicGroupingTypeId");

                    b.Navigation("CurrentState");

                    b.Navigation("TopicGroupingType");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Keyword", b =>
                {
                    b.HasOne("TelegramForwardly.DataAccess.Entities.Client", "Client")
                        .WithMany("Keywords")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Client");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.ChatType", b =>
                {
                    b.Navigation("Chats");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.Client", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("Keywords");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.ClientCurrentState", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("TelegramForwardly.DataAccess.Entities.TopicGroupingType", b =>
                {
                    b.Navigation("Clients");
                });
#pragma warning restore 612, 618
        }
    }
}
